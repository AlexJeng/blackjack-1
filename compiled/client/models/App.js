// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      this.immediateBlackJack = __bind(this.immediateBlackJack, this);
      this.figureOutWhoWon = __bind(this.figureOutWhoWon, this);
      this.newHand = __bind(this.newHand, this);
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerMoney', 40);
      return this.newHand();
    };

    App.prototype.newHand = function() {
      if ((this.get('deck')).length < 10) {
        this.set('deck', new Deck());
        alert('Deck has been shuffled!');
      }
      this.set('playerHand', (this.get('deck')).dealPlayer());
      this.set('dealerHand', (this.get('deck')).dealDealer());
      this.set('blackjack', false);
      this.trigger('render');
      if (this.immediateBlackJack()) {
        this.trigger('disableButtons');
      }
      (this.get('playerHand')).on('bust', (function(_this) {
        return function() {
          return _this.trigger('disableButtons');
        };
      })(this));
      (this.get('playerHand')).on('stand', (function(_this) {
        return function() {
          _this.trigger('disableButtons');
          return setTimeout((_this.get('dealerHand')).play, 800);
        };
      })(this));
      (this.get('dealerHand')).on('bust', (function(_this) {
        return function() {
          return (_this.get('playerHand')).status('WIN!');
        };
      })(this));
      return (this.get('dealerHand')).on('stand', (function(_this) {
        return function() {
          if ((_this.get('dealerHand')).status() !== 'BUSTS!') {
            return _this.figureOutWhoWon();
          }
        };
      })(this));
    };

    App.prototype.figureOutWhoWon = function() {
      var dealer, dealerScore, player, playerScore;
      player = this.get('playerHand');
      dealer = this.get('dealerHand');
      playerScore = player.scores();
      dealerScore = dealer.scores();
      if (playerScore > dealerScore) {
        player.status('WIN!');
        return dealer.status('loses!');
      } else if (playerScore < dealerScore) {
        player.status('lose!');
        return dealer.status('WINS!');
      } else {
        player.status('tie! PUSH!');
        return dealer.status('ties! PUSH!');
      }
    };

    App.prototype.immediateBlackJack = function() {
      var dealer, dealerScore, playerScore;
      playerScore = (this.get('playerHand')).scores();
      dealer = this.get('dealerHand');
      dealer.array[0].flip();
      if (dealer.array[1].get('value') === 1) {
        dealerScore = (this.get('dealerHand')).scores();
      } else {

      }
      if (playerScore === 21 && dealerScore === 21) {
        (this.get('playerHand')).status('have Blackjack! Push!');
        (this.get('dealerHand')).status('has Blackjack! Push!');
        this.set('blackjack', true);
        return true;
      } else if (playerScore === 21) {
        (this.get('playerHand')).status('have BLACKJACK! WINNER!');
        (this.get('dealerHand')).status('loses!');
        this.set('blackjack', true);
        return true;
      } else if (dealerScore === 21) {
        (this.get('playerHand')).status('lose!');
        (this.get('dealerHand')).status('has BLACKJACK! WINNER!');
        this.set('blackjack', true);
        return true;
      } else {
        (this.get('dealerHand')).array[0].flip();
        return false;
      }
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
