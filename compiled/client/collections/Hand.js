// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Hand = (function(_super) {
    __extends(Hand, _super);

    function Hand() {
      this.status = __bind(this.status, this);
      this.play = __bind(this.play, this);
      this.hit = __bind(this.hit, this);
      return Hand.__super__.constructor.apply(this, arguments);
    }

    Hand.prototype.model = Card;

    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.array = array;
      this.deck = deck;
      this.isDealer = isDealer;
    };

    Hand.prototype.hit = function() {
      var pop;
      pop = this.deck.pop();
      this.add(pop).last();
      if (this.scores() === 21) {
        this.stand();
      }
      if (this.scores() > 21) {
        if (this.isDealer) {
          this.status('BUSTS!');
        } else {
          this.status('BUST!');
        }
        return this.trigger('bust');
      }
    };

    Hand.prototype.stand = function() {
      return this.trigger('stand');
    };

    Hand.prototype.play = function() {
      this.array[0].flip();
      while (this.scores() < 17) {
        this.hit();
      }
      return this.stand();
    };

    Hand.prototype.scores = function() {
      var hasAce, score;
      hasAce = this.reduce(function(memo, card) {
        return memo || card.get('value') === 1;
      }, false);
      score = this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
      if (this.isDealer && hasAce && (this.at(0).get('value')) === 1 && (this.at(0).get('revealed')) === false) {
        return score;
      } else {
        if (hasAce) {
          if (score >= 21) {
            return score;
          } else if (score + 10 > 21) {
            return score;
          } else {
            return score + 10;
          }
        } else {
          return score;
        }
      }
    };

    Hand.prototype.status = function(st) {
      if (st !== void 0) {
        this.st = st;
        this.trigger('rerender');
      }
      return this.st;
    };

    return Hand;

  })(Backbone.Collection);

}).call(this);

//# sourceMappingURL=Hand.map
